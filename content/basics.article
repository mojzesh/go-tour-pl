Pakiety, zmienne, oraz funkcje.
Naucz się podstawowych komponentów każdego programu napisanego w Go.

Autorzy Go
https://golang.org

* Pakiety (ang. packages)

Każdy program Go składa się z pakietów.

Programy zaczynają swoje wykonywanie od pakietu `main`.

Ten program używa pakietów opisanych ścieżkami importowania `"fmt"` oraz `"math/rand"`.

Zgodnie z przyjętą konwencją, nazwa pakietu jest taka sama jak ostatni element jego ścieżki importowania. Na przykład, pakiet `"math/rand"` zawiera pliki które zaczynają się od instrukcji `package rand`.

#appengine: *Uwaga:* Środowisko w którym te programy są uruchamiane jest
#appengine: deterministyczne, tak więc za każdym razem gdy puścisz program
#appengine: `rand.Intn` zwróci on tę samą wartość.
#appengine:
#appengine: (By zobaczyć inną liczbę, ustaw odpowiednią wartość ziarna generatora liczb; zobacz [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: W playgroundzie czas jest stały, więc będziesz musiał użyć innej wartości jako ziarna do generatora.)

.play basics/packages.go

* Importy (tzw. Imports)

Ten kod grupuje importy w zamknięte w nawiasach, „sformatowane” instrukcje importowania.

Możesz również napisać kilka osobnych instrukcji importowania, na przykład:

	import "fmt"
	import "math"

Jednak częścią dobrego stylu programowania w Go jest używanie sformatowanych instrukcji importowania.

.play basics/imports.go

* Nazwy eksportowane (ang. exported names)

W Go nazwa jest eksportowana, gdy zaczyna się od dużej litery.
Na przykład, `Pizza` jest nazwą eksportowaną, tak samo jak `Pi`, które jest eksportowane z pakietu `math`.

`pizza` oraz `pi` nie zaczynają się od dużej litery, więc nie są eksportowane.

Gdy importujesz pakiety, możesz odnosić się tylko do nazw które eksportują.
Wszystkie „nieeksportowane” nazwy nie są dostępne poza pakietem w którym zostały zdefiniowane.

Uruchom kod. Zauważ jaki błąd zwrócił.

By naprawić ten błąd, zmień nazwę `math.pi` na `math.Pi` i spróbuj ponownie.

.play basics/exported-names.go

* Funkcje (ang. functions)

Funkcja może przyjąć zero lub więcej argumentów.

W tym przykładzie, `add` przyjmuje dwa parametry o typie `int`.

Zauważ że typ podany jest _po_ nazwie zmiennej.

(By dowiedzieć się więcej dlaczego typy wyglądają tak a nie inaczej, zobacz [[https://blog.golang.org/gos-declaration-syntax][artykuł dotyczący składni deklaracji w Go]].)

.play basics/functions.go

* Funkcje ciąg dalszy

Gdy dwa lub więcej kolejnych parametrów funkcji są tego samego typu, możesz pominąć podawanie typu po każdym z parametrów, umieszczając go tylko po ostatnim z nich.

W tym przykładzie, skróciliśmy:

	x int, y int

do

	x, y int

.play basics/functions-continued.go

* Zwracanie wielu wartości

Funkcja może zwrócić dowolną liczbę wartości.

Funkcja `swap` zwraca dwa stringi.

.play basics/multiple-results.go

* Nazwane wartości zwracane

W Go wartości zwracane mogą posiadać nazwy. Jeśli je mają, to są one traktowane jako zmienne zdefiniowane na samej górze funkcji.

Nazwy wartości zwracanych powinny być tak dobrane, by wyjaśniały ich znaczenie.

Instrukcja `return` bez żadnych argumentów zwraca nazwane wartości. Mówimy wtedy o "nagiej" instrukcji return (ang. "naked" return)

Naga instrukcja return powinna być używana tylko w krótkich funkcjach, takich jak ta w podanym przykładzie. W przeciwny razie jej użycie może pogorszyć czytelność długich funkcji.

.play basics/named-results.go

* Zmienne (ang. variables)

Instrukcja `var` deklaruje listę zmiennych; tak jak w liście argumentów funkcji typ podajemy na samym końcu.

Instrukcja `var` może znajdować się na poziomie pakietu lub funkcji. W przykładzie obok widzimy obie sytuacje.

.play basics/variables.go

* Zmienne z inicjalizatorami

Deklaracja zmiennej może zawierać inicjalizator, po jednym dla każdej zmiennej.

Jeśli inicjalizator jest obecny, podanie typu jest zbędne; zmienna przyjmie typ inicjalizatora.

.play basics/variables-with-initializers.go

* Krótkie deklaracje zmiennych (ang. short variable declarations)

W środku funkcji możemy użyć składni deklaracji `:=` zamiast `var` z domniemanym typem.

Poza funkcją, każda instrukcja rozpoczyna się od słowa kluczowego (`var`, `func`, i tak dalej), więc nie możemy tam używać składni `:=`.

.play basics/short-variable-declarations.go

* Podstawowe typy

Podstawowe typy Go to:

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias dla uint8

	rune // alias dla int32

	float32 float64

	complex64 complex128

Przykład prezentuje zmienne różnych typów,
oraz to, że deklaracje zmiennych mogą być sformatowane w bloki, tak jak
instrukcje importowania.


Typy `int`, `uint`, oraz `uintptr` mają zazwyczaj długość 32 bitów na 32-bitowych systemach i 64 bitów na systemach 64-bitowych.
Gdy potrzebna ci jest wartość całkowita, powinieneś użyć typu `int`, chyba że z jakiegoś powodu potrzebujesz liczby całkowitej o określonej długości bitów lub liczby całkowitej bez znaku.

.play basics/basic-types.go

* Wartości zerowe

Zmienne zadeklarowane bez podania jawnej wartości początkowej przyjmują
_wartość_zerową_.

Wartości zerowe wynoszą:

- `0` dla typów numerycznych,
- `false` dla typu bool, oraz
- `""` (pusty string) dla stringów.

.play basics/zero.go

* Konwersja typów

Wyrażenie `T(v)` konwertuje wartość `v` na typ `T`.

Przykładowe konwersje numeryczne:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Lub, prościej:

	i := 42
	f := float64(i)
	u := uint(f)

W przeciwieństwie do C, przypisywanie do zmiennej o innym typie wymaga
jawnej konwersji.
Spróbuj usunąć konwersje `float64` lub `uint` w przykładzie obok i zobacz co się stanie.

.play basics/type-conversions.go

* Wnioskowanie typów (ang. type inference)

Gdy deklarujemy zmienną bez określenia danego typu (poprzez użycie składni deklaracji `:=` lub `var`=`), typ zmiennej zostanie wywnioskowany na podstawie wartości po prawej stronie.

Gdy typ wartości po prawej stronie jest określony, nowo powstała zmienna będzie tego samego typu:

	var i int
	j := i // j jest int

Jednak gdy wartość po prawej stronie jest stałą numeryczną bez podanego typu, nowa zmienna może mieć typ `int`, `float64`, lub `complex128`, w zależności od dokładności stałej:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Spróbuj zmienić wartość początkową `v` w przykładzie obok i zobacz jak wpływa to na typ zmiennej.

.play basics/type-inference.go

* Stałe (ang. constants)

Stałe są deklarowane podobnie jak zmienne, jednak z użyciem słowa kluczowego `const`.

Stałe mogą być znakami tekstowymi, stringami, wartościami boolowskimi lub liczbowymi.

Stałe nie mogą być zadeklarowane przy pomocy składni `:=`.

.play basics/constants.go

* Stałe liczbowe (ang. numeric constants)

Stałe liczbowe to _wartości_ o dużej precyzji.

Stała zainicjalizowana bez podania typu, przyjmuje typ wymagany przez kontekst w którym jest użyta.

Spróbuj wydrukować `needInt(Big)`.

(`int` może maksymalnie przechowywać liczbę całkowitą zajmującą 64 bity, w pewnych wypadkach tylko mniejszą.)

.play basics/numeric-constants.go

* Gratulujemy!

Ukończyłeś tę lekcję!

Możesz wrócić do listy [[/list][modułów]] by zobaczyć czego więcej możesz się nauczyć, lub od razu przejdź do [[javascript:click('.next-page')][następnej lekcji]].
