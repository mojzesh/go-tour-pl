Więcej typów: struktury (ang. structs), wycinki (ang. slices), oraz mapy (ang. maps).
Naucz się jak zdefiniować nowe typy danych. Ta lekcja omawia struktury (ang. structs), tablice (ang. arrays), wycinki (ang. slices) oraz mapy (ang. maps).

Autorzy Go
https://golang.org

* Wskaźniki (ang. pointers)

Go posiada wskaźniki.
Wskaźnik przechowuje adres pamięci w której znajduje się dana wartość.

Typ `*T` to wskaźnik do wartości o typie `T`. Jego wartość zerowa wynosi `nil`.

	var p *int

`&` operator generuje wskaźnik do jego operandy.

	i := 42
	p = &i

Operator `*` oznacza wartość wskazywaną w pamięci przez dany wskaźnik.

	fmt.Println(*p) // odczytuje wartość i poprzez wskaźnik p
	*p = 21         // ustawia wartość i poprzez wskaźnik p

Powyższa własność nazywana jest „dereferencją” (ang. dereferencing) lub „pośrednictwem” (ang. indirecting).

W przeciwieństwie do C, Go nie ma arytmetyki wskaźników.

.play moretypes/pointers.go

* Struktury (ang. structs)

`struct` jest zbiorem pól (ang. fields).

.play moretypes/structs.go

* Pola struktur (ang. struct fields)

Aby uzyskać dostęp do pola struktury używamy kropki.

.play moretypes/struct-fields.go

* Wskaźniki do struktur (ang. pointers to structs)

Do pól struktury możemy się również dostać za pomocą wskaźnika do struktury.

By uzyskać dostęp do pola `X` struktury którą wskazuje wskaźnik do struktury `p`, możemy napisać `(*p).X`.
Jednakże, ta notacja jest niezbyt poręczna, więc Go pozwala użyć nam następującej składni: `p.X`. W tym przypadku Go pozwala nam opuścić jawną dereferencję wskaźnika.

.play moretypes/struct-pointers.go

* Struktury literalne (ang. struct literals)

Struktura literalna oznacza nowo utworzoną wartość zawierającą strukturę poprzez wymienienie wartości jej pól.

Możesz przypisać wartości tylko części pól, poprzez użycie składni `Name:`. Porządek nazwanych pól nie ma znaczenia.

Prefiks `&` zwraca wskaźnik do wartości struktury.

.play moretypes/struct-literals.go


* Tablice (ang. arrays)

Typ `[n]T` jest tablicą która zawiera `n` wartości typu `T`.

Wyrażenie

	var a [10]int

deklaruje zmienną `a` jako tablice zawierającą dziesięć intów (liczb całkowitych).

Długość tablicy jest częścią jej typu, tak więc rozmiar tablicy nie może być zmieniany.
To może wydawać się niewygodne, jednak nie należy się tym martwić;
Go posiada wiele wygodnych sposobów na pracę z tablicami.

.play moretypes/array.go

* Wycinki (ang. slices)

Tablice mają ustaloną długość. Natomiast wycinki (ang. slices)
są elastycznym w użyciu podglądem (ang. view) na elementy pewnej tablicy, których długość możemy dynamicznie zmieniać.
W praktyce, wycinki są używane dużo częściej niż tablice.

Type `[]T` jest wycinkiem z elementami o typie `T`. Składnię `[]T` czytamy: „jest to wycinek tablicy o wartościach typu `T`”, patrz [[javascript:click('.next-page')][następny slajd]].

Wycinek jest tworzony poprzez wybranie dwóch indeksów, dolnego (ang. low)
oraz górnego (ang. high) oddzielonych dwukropkiem:

	a[low : high]

Wyrażenie powyżej określa zakres elementów danego wycinka. Wycinek zawiera elementy od granicy dolnej `a[low]` do granicy górnej `a[high]`, z wyłączeniem ostatniego elementu.

Następujące wyrażenie tworzy wycinek który zawiera elementy `a` od 1 do 3:

	a[1:4]

.play moretypes/slices.go


* Wycinki są jak referencje do tablic

Wycinek nie przechowuje żadnych danych, tylko wskazuje na fragment pewnej tablicy.

Zmienianie wartości danego wycinka zmienia wartość elementu tablicy na którą wycinek wskazuje.

Inne wycinki które wskazują na tę samą tablicę, będą widziały dokonane zmiany.

.play moretypes/slices-pointers.go


* Wycinki literalne  (ang. slice literals)

Wycinek literalny wygląda jak tablica literalna bez podanej długości.

Oto tablica literalna:

	[3]bool{true, true, false}

Teraz zbudujemy taką samą tablicę jak powyżej, ale od razu utworzymy wycinek który odnosi się do niej:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Wycinki domyślne (ang. slice defaults)

Gdy tworzymy wycinki, można pominąć dolną lub górną granice, wtedy zostaną użyte ich wartości domyślne.

Wartość domyślna dla dolnej granicy wynosi zero, wartość granicy górnej jest równa długości tablicy.

Dla poniższej tablicy:

	var a [10]int

poniższe wyrażenia tworzące wycinki są równoważne:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Długości i pojemność wycinków

Wycinek posiada zarówno _długość_ (ang. length) jak i _pojemność_ (ang. capacity).

Długość (ang. len) wycinka to liczba elementów na które wskazuje.

Pojemność (ang. cap) wycinka to liczba elementów tablicy na którą dany wycinek wskazuje, licząc od pierwszego elementu wycinka.

Długość i pojemność wycinka `s` może zostać uzyskana poprzez użycie wyrażeń
`len(s)` oraz `cap(s)`.

Jeśli tylko dany wycinek posiada odpowiednią pojemność, możemy zwiększyć jego długość poprzez wycięcie z niego kolejnego wycinka (ang. re-slicing).
Spróbuj zmienić jeden z wycinków w przykładowym programie, tak by przekroczyć jego pojemność i zobacz co się stanie.

.play moretypes/slice-len-cap.go


* Wycinki zerowe (ang. nil slices)

Wartość zerowa wycinka to `nil`.

Wycinek `nil` ma długość oraz pojemność równą 0 oraz
nie wskazuje na żadną tablicę.

.play moretypes/nil-slices.go


* Tworzenie wycinka za pomocą `make`

Wycinki mogą być utworzone za pomocą wbudowanej funkcji `make`;
tak właśnie tworzymy tablice o dynamicznej długości.

Funkcja `make` tworzy tablicę o wyzerowanych wartościach elementów oraz zwraca wycinek który na nią wskazuje:

	a := make([]int, 5)  // len(a)=5

By określić pojemność, wystarczy dodać trzeci argument do funkcji `make`:

	b := make([]int, 0, 5) // len(b) = 0, cap(b) = 5

	b = b[:cap(b)] // len(b) = 5, cap(b) = 5
	b = b[1:]      // len(b) = 4, cap(b) = 4

.play moretypes/making-slices.go


* Wycinki wycinków

Wycinki mogą zawierać jako swój element każdy typ, włączając w to inne wycinki.

.play moretypes/slices-of-slice.go

* Dołączanie do wycinka

Bardzo często zdarza się że chcemy dodać nowy element do wycinka, Go posiada wbudowaną funkcję `append`.
[[https://golang.org/pkg/builtin/#append][Dokumentacja]] wbudowanej funkcji `append`.

	func append(s []T, vs ...T) []T

Pierwszym parametrem funkcji `append` jest wycinek `s` o typie `T`, pozostałe parametry to wartości typu `T` które chcemy dołączyć do wycinka.

Rezultatem funkcji `append` jest wycinek zawierający wszystkie elementy oryginalnego wycinka oraz dodatkowe elementy.

Jeśli tablica na którą wskazuje `s` jest zbyt mała by pomieścić wszystkie wartości, zostanie utworzona nowa, większa tablica. Zwrócony wycinek będzie wskazywał na nowo przydzieloną tablice.

(By dowiedzieć się więcej o wycinkach, przeczytaj artykuł [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]]).

.play moretypes/append.go


* Zakres (ang. range)

Słowo kluczowe `range` używane w pętli `for` pozwala nam iterować po wycinku (ang. slice) lub mapie (ang. map).

Gdy iterujemy po zakresie wycinka, w każdym kroku są zwracane dwie wartości.
Pierwszą jest indeks elementu wycinka, a drugą jest kopia elementu o tym indeksie.

.play moretypes/range.go

* Zakres, ciąg dalszy

Możesz pominąć indeks lub wartość elementu poprzez przypisanie ich do `_`.

    for i, _ := range pow
    for _, value := range pow

Jeśli chcesz otrzymać tylko indeks, możesz zupełnie pominąć wartość elementu.

    for i := range pow

.play moretypes/range-continued.go

* Ćwiczenie: Wycinki

Zaimplementuj funkcję `Pic`. Powinna ona zwrócić wycinek o długości `dy`, którego elementami są wycinki zawierające `dx` 8-bitowych liczb całkowitych bez znaku (ang. 8-bit unsigned integer). Gdy uruchomisz program, wyświetli on obrazek, interpretując wartości intów w skali szarości (tak naprawdę, to w skali „niebieskości”).

Wybór obrazka należy do ciebie. Przykładowe funkcje które dają ciekawy rezultat to: `(x+y)/2`, `x*y`, and `x^y`.

(Musisz użyć pętli by przypisać każdemu elementowi w `[][]uint8` wartość typu `[]uint8`.)

(Użyj `uint8(intValue)` by dokonać konwersji typów.)

.play moretypes/exercise-slices.go

* Mapy (ang. maps)

Mapa przyporządkowuje kluczom odpowiednie wartości.

Wartość zerowa mapy to `nil`.
Mapa `nil` nie posiada kluczy i żaden klucz nie może być do niej dodany.

Funkcja `make` zwraca mapę danego typu, zainicjalizowaną i gotową do użytku.

.play moretypes/maps.go

* Mapy literalne (ang. map literals)

Mapy literalne są podobne do struktur literalnych, ale podanie kluczy jest konieczne.

.play moretypes/map-literals.go

* Mapy literalne ciąg dalszy

Jeśli typ elementu zwracanego przez mapę jest po prostu nazwą typu, możesz pominąć typ w deklaracjach elementów mapy literalnej.

.play moretypes/map-literals-continued.go

* Modyfikacja map

Wstawianie lub aktualizacja elementu w mapie `m`:

	m[key] = elem

Pobranie elementu:

	elem = m[key]

Usunięcie elementu:

	delete(m, key)

Sprawdzenie czy mapa zawiera dany klucz poprzez przypisanie wyniku do dwóch zmiennych:

	elem, ok = m[key]

Jeśli mapa `m` zawiera klucz `key` w mapie `m`, `ok` ma wartość `true`. Jeśli nie, `ok` jest równe `false`.

Jeśli mapa nie zawiera klucza `key`, wówczas `elem` przyjmuje wartość zerową typu elementu mapy.

*Uwaga:* Jeśli `elem` lub `ok` nie zostały zadeklarowane, możesz użyć krótkiej formy deklaracji:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Ćwiczenie: Mapy

Zaimplementuj `WordCount`.  Program powinien zwrócić mapę która policzy ilość wystąpień każdego "wyrazu" w stringu `s`. Funkcja `wc.Test` uruchamia test twojej funkcji i wypisuje na ekranie "success" (pl. sukces) lub "failure" (pl. niepowodzenie).

W tym ćwiczeniu może okazać się pomocne zapoznanie się z funkcją
[[https://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Wartości funkcji

Funkcje również są wartościami. Mogą zostać przekazywane tak samo jak wszystkie inne wartości.

Wartości będące funkcjami mogą być użyte jako argumenty funkcji oraz wartości zwracane.

.play moretypes/function-values.go

* Domknięcia funkcji (ang. function closures)

Funkcje w Go mogą być domknięciami. Domknięcie to funkcja będąca wartością która odnosi się do zmiennych znajdujących się poza jej ciałem. Funkcja ma dostęp do wspomnianych zmiennych; w tym sensie funkcja jest „powiązana” z tymi zmiennymi.

Przykładowo, funkcja `adder` zwraca domknięcie. Każde domknięcie jest powiązane ze swoją własną zmienną `sum`.

.play moretypes/function-closures.go

* Ćwiczenie: Domknięcie fibonacci

Pobawmy się trochę funkcjami.

Zaimplementuj funkcję `fibonacci` która zwróci funkcję (domknięcie) która zwraca ciąg
[[https://en.wikipedia.org/wiki/Fibonacci_number][liczby Fibonacciego]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Gratulujemy!

Ukończyłeś tę lekcję!

Możesz wrócić do listy [[/list][modułów]] by dowiedzieć się czego nauczyć się następnie, lub kontynuować do [[javascript:click('.next-page')][następnej lekcji]]
