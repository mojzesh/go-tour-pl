Instrukcje sterujące: for, if, else, switch oraz defer
Naucz się jak kontrolować działanie twojego kodu używając instrukcji warunkowych (ang. conditionals), pętli (ang. loops), instrukcji switch oraz defer.

Autorzy Go
https://golang.org

* For

Go posiada tylko jeden typ pętli, jest nią pętla `for`.

Podstawowa pętla `for` posiada trzy składniki oddzielone średnikiem:

- inicjalizacja: odbywa się raz, tuż przez rozpoczęciem pętli
- wyrażenie warunkowe: sprawdzone przed każdym rozpoczęciem pętli
- inkrementacja: wykonana po każdej iteracji pętli.

Bardzo często inicjalizacja jest krótką deklaracją zmiennej lub zmiennych, i owe zmienne będą dostępne tylko wewnątrz bloku danej pętli `for`.

Pętla zakończy iterację gdy tylko wartość boolowska przyjmie wartość `false`.

*Uwaga:* W odróżnieniu od innych języków takich jak C, Java, lub JavaScript nie używamy nawiasów
otaczających trzy składniki instrukcji `for` jednak `{`}` muszą być zawsze obecne.

.play flowcontrol/for.go

* Pętla "for" ciąg dalszy

Inicjalizacja oraz inkrementacja są opcjonalne.

.play flowcontrol/for-continued.go

* "For" jest "while" Go

W tym momencie możesz opuścić średniki: `while` z C jest tym samym co `for` w Go.

.play flowcontrol/for-is-gos-while.go

* Wieczna pętla

Jeśli ominiesz wyrażenie warunkowe pętli, stworzysz nieskończoną pętlę.

.play flowcontrol/forever.go

* If

Instrukcja `if` w Go przypomina jego pętlę `for`; wyrażenie boolowskie nie musi być otoczone nawiasami `(`)` jednak `{`}` są wymagane.

.play flowcontrol/if.go

* If z krótką instrukcją

Tak jak `for`, instrukcja `if` może rozpoczynać się krótką instrukcją umieszczoną tuż przed warunkiem boolowskim.

Zmienne zadeklarowane poprzez tą instrukcje są dostępne tylko do końca instrukcji `if`.

(Spróbuj użyć `v` w ostatnim wyrażeniu `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If oraz else

Zmienne zadeklarowane w środku krótkiej instrukcji `if` są również dostępne w środku każdego bloku `else`.

(Oba wywołania `pow` zwracają rezultat zanim wywołanie `fmt.Println` w `main` się rozpocznie.)

.play flowcontrol/if-and-else.go

* Ćwiczenie: Pętle oraz funkcje

Jako sposób na przećwiczenie funkcji oraz pętli, zaimplementujmy funkcję pierwiastka kwadratowego: mając daną liczbę x, chcemy znaleźć liczbę z, taką że z² jest możliwie najbliżej liczby x.

Komputery z reguły obliczają pierwiastek kwadratowy x używając pętli.
Zaczynając od jakieś wybranej liczby `z`, możemy poprawić wartość `z` na podstawie tego jak blisko jest z² do x, ulepszając nasz rezultat:

	z -= (z*z - x) / (2*z)

Po każdej zmianie `z` nasz rezultat powinien się poprawiać,
aż do momentu gdy otrzymamy odpowiedź tak zbliżoną do pierwiastka kwadratowego jak tylko jest to możliwe.

Zaimplementuj powyższe rozumowanie w napisanej dla ciebie `func`Sqrt`.
Przyzwoitym punktem startowym dla dowolnego `z` będzie 1.
Na początek, powtórz obliczenia 10 razy i wydrukuj każde `z`.
Zobacz jak blisko odpowiedzi jesteś dla różnych wartości x (1, 2, 3, ...) oraz jak szybko wynik się poprawia.

Wskazówka: By zadeklarować wartość zmiennoprzecinkową (ang. floating point value),
skorzystaj ze składni zmiennoprzecinkowej lub użyj konwersji:

	z := 1.0
	z := float64(1)

Następnie, zmień warunek pętli tak, by pętla zatrzymała się gdy obliczana wartość przestanie się zmieniać (lub będzie się zmieniać tylko o bardzo niewielką liczbę).
Sprawdź czy stanie się to po więcej lub mniej niż 10 iteracjach.
Wypróbuj inne wartości początkowe dla z, takie jak x, lub x/2.
Jak blisko wartość zwracana przez twoją funkcję jest tej zwracanej przez funkcję [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] biblioteki standardowej?

(*Uwaga:* Jeśli jesteś zainteresowany szczegółami działania tego algorytmu, podane wyżej wyrażenie z² − x pokazuje jak daleko wartość z² odbiega od tej jaką powinna mieć (x). Podzielenie 2z, które jest pochodną
z², przeskalowuje wielkość o jaką poprawiamy z, by uwzględnić to jak szybko zmienia się wartość z².)

To podejście nazywane jest [[https://en.wikipedia.org/wiki/Newton%27s_method][metodą Newtona]].
Działa ono bardzo dobrze dla wielu funkcji, jednak wyjątkowo dobrze dla pierwiastka kwadratowego.

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Instrukcja warunkowa `switch` jest krótszym sposobem na zapisanie ciągu instrukcji `if`-`else`.
Wykonuje pierwszy przypadek dla którego wartość jego warunku jest równa wyrażeniu warunkowemu.

Switch w Go jest jak to w C, C++, Java, JavaScript, oraz PHP,
z tą różnicą że w Go, wykonywany jest tylko przypadek (ang. case) który spełnia zadany warunek, a nie również wszystkie pod nim.
W efekcie, instrukcja `break` która jest wymagana na końcu każdego przypadku w innych językach, w Go dostarczana jest automatycznie.
Kolejną ważną różnicą jest to, że warunki `switch` w Go nie muszą być stałymi, a wartości porównywane nie muszą być liczbami całkowitymi (ang. integers).

.play flowcontrol/switch.go

* Porządek wykonywania instrukcji switch

Warunki switch są wykonywane od góry do dołu, procedura zatrzymuje się gdy wartość danego warunku pokrywa się z wartością sprawdzaną.

(Na przykład,

	switch i {
	case 0:
	case f():
	}

`f` nie zostanie wykonany jeżeli `i == 0`.)

#appengine: *Uwaga:* Czas w playgroundzie Go jest liczony od
#appengine: 2009-11-10 23:00:00 UTC, ustalenie znaczenia tej wartości
#appengine: pozostawiamy jako ćwiczenie dla czytelnika.

.play flowcontrol/switch-evaluation-order.go

* Switch bez głównego warunku

Switch bez głównego warunku jest tym samym co `switch`true`.

Ta konstrukcja może być bardziej przejrzystym sposobem na zapisanie długiego ciągu if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer — czyli opóźnione wykonanie

Instrukcja defer opóźnia wykonanie funkcji do momentu gdy otaczająca funkcja zwróci wynik.

Wywołane argumenty w defer są ewaluowane natychmiastowo, jednak sama funkcja
jest wywołana dopiero gdy otaczająca ją funkcja zwróci wynik.

.play flowcontrol/defer.go

* Stertowanie defer

Funkcje wywołane z instrukcją `defer` są umieszczane na stosie. Po tym jak główna funkcja zwróci wynik, funkcje wywołane wewnątrz niej z instrukcją `defer` są wykonywane w kolejności od ostatniej do pierwszej z nich która została umieszczona na stosie (LIFO, ang. Last In, First Out).

By dowiedzieć się więcej o instrukcji `defer`, przeczytaj ten
[[https://blog.golang.org/defer-panic-and-recover][artykuł]] na „The Go Blog”.

.play flowcontrol/defer-multi.go

* Gratulujemy!

Ukończyłeś tę lekcję!

Możesz wrócić do listy [[/list][modułów]] by zobaczyć czego więcej możesz się nauczyć, lub od razu przejść do [[javascript:click('.next-page')][następnej lekcji]].
