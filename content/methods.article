Metody oraz interfejsy
Ta lekcja omawia metody oraz interfejsy, konstrukcje które definiują obiekty oraz ich zachowanie.

Autorzy Go
https://golang.org

* Metody

Go nie posiada klas.
Jednakże, możesz definiować metody dla danych typów.

Metoda to funkcja ze specjalnym argumentem nazywanym _odbiorcą_
(ang. _receiver_)

Odbiorcę podajemy w jego własnej liście argumentów pomiędzy słowem `func`
a nazwą metody.

W tym przykładzie, metoda `Abs` posiada odbiorcę typu `Vertex` o nazwie `v`.

.play methods/methods.go

* Metody to funkcje

Zapamiętaj: metoda to po prostu funkcja posiadają odbiorcę jako swój
argument.

Tutaj mamy `Abs` zdefiniowany jako normalną funkcję bez zmian w jej
funkcjonalności.

.play methods/methods-funcs.go

* Metody ciąg dalszy

Możesz również zadeklarować metodę na typach nie będących strukturami.

W tym przykładzie, widzimy typ numeryczny `MyFloat` wraz z metodą `Abs`.

Metodę możesz zadeklarować tylko dla odbiorcy którego typ jest zdefiniowany
w tym samym pakiecie co metoda.
Nie możesz zadeklarować metody dla odbiorcy którego typ jest zadeklarowany
w innym pakiecie (dotyczy to w szczególności wbudowanych typów, takich jak
`int`).

.play methods/methods-continued.go

* Odbiorcy wskaźników

Możesz zadeklarować metody dla odbiorców wskaźników (ang. pointer receivers).

To oznacza, że typ odbiorcy ma składnię literalną `*T` dla jakiegoś typu `T`.
(Dodatkowo `T` sam nie może być wskaźnikiem, takim jak na przykład `*int`.)

Na przykład, metoda `Scale` zdefiniowana jest dla typu `*Vertex`.

Metody z odbiorcami wskaźników mogą zmieniać wartości które wskazuje odbiorca
(tak jak `Scale` robi to w tym przykładzie).
Ponieważ metody często potrzebują zmieniać swojego odbiorcę, odbiorcy
wskaźników są dużo częściej używani niż odbiorcy wartości.

Spróbuj usunąć `*` z deklaracji funkcji `Scale` w linii 16 i zobacz jak
zmieni się działanie programu.

Metoda `Scale` zdefiniowana z odbiorcą wartości operuje na kopii wartości
typu `Vertex`.
(Jest to takie samo zachowanie jak w przypadku wszystkich innych argumentów
funkcji.)
Metoda `Scale` musi posiadać odbiorcę wskaźnika by móc zmienić wartość typu
`Vertex` zadeklarowaną w funkcji `main`.

.play methods/methods-pointers.go

* Wskaźniki i funkcje

Tu widzimy metody `Abs` oraz `Scale` zapisane jako funkcje.

Jeszcze raz spróbuj usunąć `*` z linii 16.
Czy potrafisz dostrzec dlaczego działanie programu się zmieniło?
Co jeszcze powinieneś zmienić by przykład się skompilował?

(Jeśli nie jesteś pewien, przejdź do następnej strony.)

.play methods/methods-pointers-explained.go

* Metody oraz dereferencja wskaźników

Porównując dwa poprzednie programy, mogłeś zauważyć że
funkcje z argumentem będącym wskaźnikiem mogą przyjmować tylko argumenty będące wskaźnikami:

	var v Vertex
	ScaleFunc(v, 5)  // Błąd kompilacji!
	ScaleFunc(&v, 5) // OK

podczas gdy metody z odbiornikiem wskaźnika przyjmują jako swojego odbiorcę zarówno wartość jak i wskaźnik:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

W instrukcji `v.Scale(5)`, nawet jeśli `v` jest wartością a nie wskaźnikiem,
metoda z odbiorcą wskaźnika jest wywołana automatycznie.
Dzieje się tak, ponieważ dla wygody programowania Go interpretuje instrukcję
`v.Scale(5)` jako `(&v).Scale(5)`, gdyż metoda `Scale` posiada odbiorcę
wskaźnika.

.play methods/indirection.go

* Metody oraz dereferencja wskaźników (2)

To samo dzieje się w odwrotnej sytuacji.

Funkcje które przyjmują jako argument wartość, mogą być wywołane tylko
z wartością danego typu:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Błąd kompilacji!

podczas gdy metody z odbiorcą wartości przyjmują zarówno wartość jak
i wskaźniki jako swojego odbiorcę, gdy są wywołane w następujący sposób:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

W takiej sytuacji, wywołanie metody `p.Abs()` jest interpretowane jako
`(*p).Abs()`.

.play methods/indirection-values.go

* Wybieranie pomiędzy odbiorcą wartości lub wskaźnika

Istnieją dwa powody dla których warto używać odbiorców wskaźników.

Pierwszy to taki że taka metoda może zmodyfikować wartość którą wskazuje
odbiorca.

Drugi powód jest taki, że unikamy kopiowania wartości przy każdym wywołaniu
metody. To może być bardzo wydajna metoda pracy z danymi, jeśli na przykład
odbiorca jest dużą strukturą.

W tym przykładzie, `Scale` oraz `Abs` posiadają typ odbiorcy `*Vertex`,
pomimo tego że metoda `Abs` nie modyfikuje swego odbiorcy.

W ogólnym przypadku wszystkie metody zdefiniowane dla danego typu powinny
mieć odbiorcę wartości albo odbiorcę wskaźnika, ale nie oba rodzaje
odbiorcy na raz. (Dlaczego tak jest, zobaczymy na następnych stronach.)

.play methods/methods-with-pointer-receivers.go

* Interfejsy (ang. interfaces)

Typ klasy interfejs jest definiowany przez zbiór sygnatur jego metody.

Wartość o typie będącym konkretnym interfejsem może przechowywać
jakąkolwiek wartość która implementuje te metody.

*Uwaga:* W przykładowym kodzie jest błąd w linii 22.
`Vertex` (typ wartości) nie implementuje `Abser`, ponieważ metoda `Abs`
jest zdefiniowana tylko na `*Vertex` (jest to typ wskaźnik na `Vertex`).

.play methods/interfaces.go

* Interfejsy są implementowane domyślnie

Typ implementuje interfejs implementując jego metody.
Nie ma tutaj jawnej deklaracji tworzącej dany typ klasy interfejs, takiej
jak na przykład „implements”.

Domyślne tworzenie interfejsu rozdziela definicje interfejsu od jego
implementacji, które mogą się potem pojawić w dowolnym pakiecie bez
potrzeby wstępnej organizacji kodu.

.play methods/interfaces-are-satisfied-implicitly.go

* Wartości interfejsów

Jeśli chodzi o szczegóły techniczne, o wartościach przyjmowanej przez
interfejs można myśleć jak o krotce (ang. tuple) zawierającej wartość
i konkretny typ:

	(wartość, typ)

Wartość interfejsu przechowuje wartość posiadającą określony konkretny typ.

Wywołanie metody na wartości interfejsu, wykonuje metodę o tej samej nazwie
zdefiniowaną dla typu zawartego w interfejsie.

.play methods/interface-values.go

* Wartości interfejsu przechowujące wartość `nil`

Jeśli konkretna wartość w interfejsie to `nil`,
metoda zostanie wywołana z odbiorcą `nil`.

W niektórych językach wywołałoby to `null pointer exception`,
lecz w Go często tworzymy metody, które skutecznie radzą sobie z sytuacją
gdy są wywołane z odbiorcą `nil` (jako przykład można podać metodę `M`
w kodzie obok).

Zauważ, że interfejs który przechowuje jako wartość `nil`, sam nie jest
reprezentowany przez `nil`.

.play methods/interface-values-with-nil.go

* Wartości `nil` interfejsów

Wartość `nil` interfejsu nie przetrzymuje ani konkretnej wartości ani
żadnego konkretnego typu.

Wywołanie metody na wartości interfejsu będącą `nil` powoduje błąd w czasie
wykonania programu (ang. run-time error), ponieważ wewnątrz
interfejsu nie ma typu który wskazałby którą dokładnie metodę należy wywołać.

.play methods/nil-interface-values.go

* Pusty interfejs

„Pusty interfejs” to typ interfejsu który nie określa żadnej metody:

	interface{}

Pusty interfejs może przetrzymywać wartości każdego typu.
(Każdy typ implementuje co najmniej zero metod.)

Puste interfejsy używane są przez kod który obsługuje wartości nieznanych
typów. Na przykład, `fmt.Print` przyjmuje jakąkolwiek liczbę argumentów
typu `interface{}`.

.play methods/empty-interface.go

* Sprawdzanie typów (ang. type assertions)

Sprawdzanie typu pozwala uzyskać dostęp do wartości o konkretnym typie
która jest zawarta w interfejsie.

	t := i.(T)

Instrukcja powyżej zakłada że wartość interfejsu `i` zawiera konkretny
typ `T` oraz przypisuje konkretną wartość interfejsu o typie `T` zmiennej
`t`.

Jeśli `i` nie zawiera typu `T`, instrukcja ta spowoduje wywołanie paniki
(ang. panic).

By _przetestować_ czy interfejs zawiera wartość konkretnego typu,
sprawdzenie typu może zwrócić dwie wartości: wartość zawartą w interfejsie
oraz wartość typu bool która określa czy sprawdzenie typu dało wynik
pozytywny.

	t, ok := i.(T)

Jeśli `i` zawiera typ `T`, wtedy `t` będzie wartością zawartą w interfejsie
a `ok` będzie miało wartość `true`.

W przeciwnym wypadku, `ok` będzie miało wartość `false`, a `t` będzie miało
wartością zerową typu `T`, zaś panika (ang. panic) nie zostanie wywołana.


Zauważ podobieństwo między składnią powyżej i tą która jest używana by
odczytać wartość z mapy.

.play methods/type-assertions.go

* Instrukcja switch typów (ang. switch)

Switch typów jest konstrukcją który pozwala dokonać kilku sprawdzeń typów
po kolei.

Switch typów jest jak normalna instrukcja switch, jednak warunki w switch
typów określają odpowiednie typy, a nie wartości. Wartości tych typów
porównywane są z typem wartości zawartej w wartości interfejsu.

	switch v := i.(type) {
	case T:
		// v ma typ T
	case S:
		// v ma typ S
	default:
		// żaden warunek nie pasuje; v ma ten sam typ co i
	}

Deklaracja w switch typów ma tą samą składnię co sprawdzenie typu `i.(T)`,
jednak konkretny typ `T` jest zastąpiony słowem kluczowym `type`.

Ta instrukcja switch sprawdza czy wartość interfejsu `i` zawiera wartość
typu `T` lub `S`. W przypadku warunków na `T` lub `S`, zmienna `v` przyjmie
typ `T` lub `S` i przyjmie wartość zawartą w `i`. W przypadku warunku
domyślnego (ang. default), zmienna `v` przyjmie ten sam typ klasy interfejs
oraz tą samą wartość co `i`.

.play methods/type-switches.go

* Stringers

Jednym z najbardziej wszechobecnych interfejsów jest
[[//golang.org/pkg/fmt/#Stringer][`Stringer`]] zdefiniowany przez pakiet
[[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

`Stringer` jest typem który może przedstawić samego siebie jako string.
Pakiet `fmt` (i wiele innych) używa tego interfejsu by wypisywać wartości.

.play methods/stringer.go

* Ćwiczenie: Stringers

Spraw by typ `IPAddr` zaimplementował `fmt.Stringer` poprzez metodę
wypisującą adres jako cztery liczby oddzielone kropkami.

Na przykład, `IPAddr{1,`2,`3,`4}` powinien zostać wypisany jako `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Błędy (ang. errors)

Błędy w Go to wartości typu `error`.

Typ `error` jest wbudowanym interfejsem podobnym do `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Tak samo jak w przypadku `fmt.Stringer`, pakiet `fmt` szuka interfejsu
`error` gdy wypisuje wartości.)

Funkcje często zwracają wartość `error`, a kod wywołujący funkcję powinien
obsłużyć błąd, testując czy `error` jest równy `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("nie mogłem przekonwertować liczby: %v\n", err)
		return
	}
	fmt.Println("Przekonwertowany integer:", i)

`error` o wartości `nil` oznacza sukces; `error` o wartości innej niż `nil`
oznacza niepowodzenie.

.play methods/errors.go

* Ćwiecznie: Errors

Skopiuj swoją funkcję `Sqrt` z [[/flowcontrol/8][wcześniejszego ćwiczenia]]
i zmodyfikuj ją tak by zwracała również wartość typu `error`.

`Sqrt` powinna zwrócić wartość `error` inną niż `nil`, kiedy jej argument
liczbowy będzie liczbą ujemną, gdyż funkcja ta nie obsługuje liczb
zespolonych.

Stwórz nowy typ

	type ErrNegativeSqrt float64

i spraw by był on interfejsem typu `error` poprzez implementację metody

	func (e ErrNegativeSqrt) Error() string

Jako rezultat wywołania `ErrNegativeSqrt(-2).Error()` powinien zostać
zwrócony string `"cannot`Sqrt`negative`number:`-2"`.

*Uwaga:* Wywołanie `fmt.Sprint(e)` wewnątrz metody `Error` spowoduje że
program wejdzie w nieskończoną pętlę. Możesz tego uniknąć dokonując
konwersji `e`: `fmt.Sprint(float64(e))`. Spróbuj odpowiedzieć sobie,
dlaczego tak jest?

Zmień swoją funkcję `Sqrt` tak by zwracała wartość typu `ErrNegativeSqrt`
gdy otrzyma jako argument liczbę ujemną.

.play methods/exercise-errors.go

* Czytniki (ang. readers)

Pakiet `io` definiuje interfejs `io.Reader`, który pozwala czytać ze
strumienia danych.

Standardowa biblioteka Go zawiera
[[https://golang.org/search?q=Read#Global][wiele implementacji]] tego
interfejsu, między innymi dla plików, połączeń sieciowych, kompresorów
danych, szyfrów i innych.

`io.Reader` interfejs posiada metodę `Read`:
	func (T) Read(b []byte) (n int, err error)

`Read` zapełnia odczytanymi danymi wycinek wskazujący na tablicę bajtów,
zwraca zaś inta reprezentującego ilość przeczytanych właśnie bajtów
oraz wartość typu `error`. Gdy `Read` dojdzie do końca strumienia danych
zwraca błąd `io.EOF` (błąd końca pliku, ang. end of file error).

Kod podany w przykładzie tworzy
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
oraz pobiera 8 bajtów ze strumienia przy każdym wywołaniu.

.play methods/reader.go

* Ćwiczenie: Readers

Zaimplementuj typ `Reader` który wysyła nieskończony strumień zawierający
tylko znak ASCII `'A'`.

.play methods/exercise-reader.go

* Ćwiczenie: rot13Reader

Często spotykanym schematem postępowania jest tworzenie interfejsu typu
[[https://golang.org/pkg/io/#Reader][io.Reader]] wewnątrz którego znajduje
się kolejny `io.Reader`, przy czym zewnętrzy interfejs posiada inne metody
obsługujące strumień danych.

Na przykład, funkcja
[[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] bierze
`io.Reader` (strumień skompresowanych danych) i zwraca `*gzip.Reader` który
również implementuje `io.Reader` (strumień zdekompresowanych danych).

Zaimplementuj `rot13Reader` który implementuje `io.Reader` oraz czyta z tego
`io.Reader`, modyfikując otrzymany strumień poprzez użycie szyfru
podstawieniowego [[https://en.wikipedia.org/wiki/ROT13][rot13]]
do wszystkich liter alfabetu.

Typ `rot13Reader` jest już dla ciebie zdefiniowany.
Zrób z niego interfejs typu `io.Reader` poprzez zaimplementowanie dla niego
metody `Read`.

.play methods/exercise-rot-reader.go

* Obrazy (ang. images)

[[https://golang.org/pkg/image/#Image][Pakiet `image`]] definiuje interfejs
`Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Uwaga*: Dokładniej rzecz biorąc typ wartości zwracanej przez metodę
`Bounds` to nie `Rectangle`, lecz
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], ponieważ
jego deklaracja znajduje się w pakiecie `image`.

(Zobacz odpowiedni
[[https://golang.org/pkg/image/#Image][fragment dokumentacji]] by dowiedzieć
się więcej.)

Typy `color.Color` oraz `color.Model` również są interfejsami, jednak
zignorujemy ten fakt poprzez użycie zdefiniowanych wcześniej implementacji
`color.RGBA` oraz `color.RGBAModel`. Te interfejsy oraz typy dany są
zdefiniowane w pakiecie [[https://golang.org/pkg/image/color/][image/color]].

.play methods/images.go

* Ćwiczenie: Images

Pamiętasz [[/moretypes/18][generator obrazów]] który napisałeś wcześniej?
Spróbujmy napisać kolejny, tym razem zamiast zwracać wycinek danych, zwróci
on implementację interfejsu `image.Image`.

Zdefiniuj swój własny typ `Image`, zaimplementuj
[[https://golang.org/pkg/image/#Image][wymagane metody]], oraz wywołaj
`pic.ShowImage`.

Metoda `Bounds` powinna zwrócić wartość typu `image.Rectangle`, przykładowo
`image.Rect(0,`0,`w,`h)`.

Metoda `ColorModel` powinna zwrócić `color.RGBAModel`.

Metoda `At` powinna zwrócić kolor; wartości `v` w poprzednim generatorze
obrazów odpowiada teraz wartość `color.RGBA{v,`v,`255,`255}`.

.play methods/exercise-images.go

* Gratulujemy!

Ukończyłeś tę lekcję!

Możesz wrócić do listy [[/list][modułów]] by zobaczyć czego więcej
możesz się nauczyć, lub od razu przejść do
[[javascript:click('.next-page')][następnej lekcji]].
