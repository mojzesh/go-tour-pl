Współbieżność (ang. concurrency)

W Go współbieżności jest jedną z podstawowych składowych języka. Ta lekcja
prezentuje gorutyny oraz kanały i jak można ich użyć, by zaimplementować
różne schematy współbieżności.

Autorzy Go
https://golang.org

* Gorutyny (ang. goroutines)

W Go _gorutyna_ jest wydajnym wątkiem którym zarządza biblioteka runtime.

Kod

	go f(x, y, z)

rozpoczyna nową gorutynę:

	f(x, y, z)

Ewaluacja wartości `f`, `x`, `y` oraz `z` odbywa się w obecnej gorutynie, a wykonanie funkcji `f` już w nowej.

Gorutyny działają w tej samej przestrzeni adresowej, tak więc dostęp
do współdzielonej pamięci musi być zsynchronizowany. Pakiet
[[https://golang.org/pkg/sync/][`sync`]] dostarcza przydatnych prymitywów,
jednak nie będziesz ich zbyt często potrzebował, ponieważ Go posiada inne
prymitywy stworzone w tym celu. (Zobacz następny slajd.)

.play concurrency/goroutines.go

* Kanały (ang. channels)

Kanały są posiadającymi typ „kablami” przez które możesz wysyłać
i odbierać wartości używając operatora `<-`.

	ch <- v    // Wysyła v do kanału ch.
	v := <-ch  // Odbiera wartość z kanału ch
	           // i przypisuje ją do v.

(Przepływ danych odbywa się w kierunku w którym wskazuje strzałka.)

Tak jak mapy oraz wycinki, kanały muszą zostać stworzone przed użyciem:

	ch := make(chan int)

Domyślnie, wysyłanie oraz odbieranie są zablokowane dopóki druga strona nie
jest gotowa. To pozwala gorutynom na synchronizację bez jawnej blokady
lub zmiennych warunkowych.

Kod przykładu obok sumuje liczby zawarte w wycinku, rozdzielając pracę
pomiędzy dwie gorutyny. Gdy obydwie gorutyny ukończą swoje obliczenia,
wyliczany jest wynik końcowy.

.play concurrency/channels.go

* Kanały buforowane (ang. buffered channels)

Kanały mogą być _buforowane_. Aby zainicjalizować kanał buforowany podaj
wielkość bufora jako drugi argument funkcji `make`:

	ch := make(chan int, 100)

Wysyłanie do kanału buforowanego wprowadza blokadę tylko gdy bufor jest
pełny. Odbieranie wprowadza blokadę tylko gdy bufor jest pusty.

Zmodyfikuj przykład tak by przepełnić bufor i zobacz co się stanie.

.play concurrency/buffered-channels.go

* Zakres i zamykanie kanału (ang. range, closing of channel)

Wysyłający może zamknąć (ang. `close`) kanał by zasygnalizować, iż do
danego kanału nie zostanie już przesłana żadna wartość. Odbierający może
sprawdzić czy kanał został zamknięty poprzez wprowadzenie drugiego parametru
do wyrażenia odbierającego wartości z kanału:

	v, ok := <-ch

Jeśli `ok` przyjmie wartość boolowską `false` to znaczy, że nie ma więcej
wartości które można odebrać i kanał jest zamknięty.

Pętla `for`i`:=`range`c` cały czas odbiera wartości z kanału `c`, dopóki ten
nie zostanie zamknięty.

*Uwaga:* Tylko wysyłający powinien zamykać kanał, nigdy odbierający. Próba
wysłania czegoś przez zamknięty kanał wywoła panikę.

*Kolejna*uwaga:* Kanały nie są jak pliki; zwykle nie musisz ich zamykać.
Zamykanie kanałów jest niezbędne tylko wtedy, gdy odbiorca musi wiedzieć,
że więcej wartości nie zostanie już nim przesłanych, na przykład po to by
mógł zakończyć działanie wyrażenia `range` w pętli.

.play concurrency/range-and-close.go

* Select

Instrukcja `select` pozwala gorutynom oczekiwać w tym samym czasie na sygnał z kilku różnych źródeł.

Instrukcja `select` blokuje działanie gorutyny dopóki jedna z jej warunków
nie uruchomi się, wówczas wykonuje odpowiadający temu warunkowi przypadek
(ang. `case`). Jeśli kilka warunków zostaje uruchomionych jednocześnie, `select` wybiera losowo jeden z dostępnych przypadków i wykonuje go.

.play concurrency/select.go

* Domyślna selekcja

Przypadek `default` w `select` jest uruchamiany w momencie gdy żaden z
warunków dostępnych przypadków nie został uruchomiony w danej chwili.

Użyj przypadku `default` by wysłać lub otrzymać wartość bez blokowania:

	select {
	case i := <-c:
		// użyj i
	default:
		// otrzymywanie od c zablokowałoby kanał
	}

.play concurrency/default-selection.go

* Ćwiczenie: Równoważne drzewa binarne

Może istnieć wiele różnych drzew binarnych przechowujących ten sam ciąg
liczb. Przykładowo, poniżej mamy dwa drzewa binarne przechowujące ciąg
1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Napisanie funkcji która sprawdza czy oba drzewa binarne przechowują ten
sam ciąg liczb, w wielu językach jest bardzo skomplikowane. My użyjemy
współbieżności i kanałów Go by rozwiązać ten problem w prosty sposób.

Ten przykład używa pakietu `tree`, które definiuje typ:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}



Kontynuuj opis ćwiczenia na [[javascript:click('.next-page')][następnej stronie]].

* Ćwiczenie: Równowartościowe drzewa binarne

*1.* Zaimplementuj funkcję `Walk`.

*2.* Przetestuj funkcję `Walk`.

Funkcja `tree.New(k)` konstruuje drzewo binarne o losowej strukturze
(ale zawsze jest ono posortowane) przetrzymujące wartości
`k`, `2k`, `3k`, ..., `10k`.

Stwórz nowy kanał `ch` i wywołaj gorutynę przechodzącą przez drzewo:

	go Walk(tree.New(1), ch)

Następnie odczytaj i wypisz 10 wartości z kanału `ch`. Powinny być to liczby
1, 2, 3, ..., 10.

*3.* Zaimplementuj funkcję `Same` używając `Walk` by sprawdzić czy `t1`
i `t2` posiadają te same wartości.

*4.* Przetestuj funkcję `Same`.

`Same(tree.New(1),`tree.New(1))` powinno zwrócić true, a `Same(tree.New(1),`tree.New(2))` powinno zwrócić false.

Dokumentacja pakietu `Tree` jest dostępna [[https://godoc.org/golang.org/x/tour/tree#Tree][tutaj]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Widzieliśmy jak doskonałym narzędziem do komunikowania się pomiędzy
gorutynami są kanały.

Ale co jeśli nie potrzebujemy komunikacji? Co zrobić w sytuacji gdy chcemy
by tylko jedna gorutyna mogła mieć w danym momencie dostęp do danej
zmiennej, by unikać konfliktów między gorutynami?

Ta koncepcja nosi nazwę _wzajemnego wykluczania_ (ang. mutual
exclusion), a strukturę danych która pozwala nam z niej korzystać zwyczajowo
nazywamy _mutex_.

Biblioteka standardowa Go implementuje mechanizm wzajemnego wykluczania
za pomocą typu [[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]]
oraz jego dwóch metod:

- `Lock`
- `Unlock`

Możemy napisać blok kodu który będzie wykonywany w trybie wzajemnego
wykluczania poprzez otoczenie go wywołaniami metod `Lock` i `Unlock`,
tak jak zostało to pokazane w definicji metody `Inc`.

Możemy też użyć instrukcji `defer` by upewnić się, że mutex zostanie
otwarty (ang. unlocked), tak jak widać to w definicji metody `Value`.

.play concurrency/mutex-counter.go

* Ćwiczenie: Web Crawler

W tym ćwiczeniu użyjemy współbieżności języka Go, by zrównoleglić
działanie web crawlera.

Zmodyfikuj funkcję `Crawl` by pobierała adresy URL w sposób równoległy, bez pobierania tego samego adresu URL dwa razy.


_Podpowiedź_: możesz zapisywać pobrane adresy URL w mapie, jednak map
samych w sobie nie można używać w sposób bezpieczny, gdy program jest
wykonywany w sposób współbieżny!

.play concurrency/exercise-web-crawler.go

* Gdzie się wybrać dalej...

#appengine: Możesz zacząć od
#appengine: [[https://golang.org/dl/][zainstalowania Go]].

#appengine: Gdy już masz zainstalowane Go, to
[[https://golang.org/doc/][Dokumentacja Go]] jest świetnym miejscem by
#appengine: kontynuować naukę.
zacząć naukę.
Zawiera odnośniki, tutoriale, filmy video i dużo więcej.

By dowiedzieć się jak zorganizować i jak pracować z kodem w Go, zobacz
[[https://www.youtube.com/watch?v=XCsL89YtqCs][to nagranie]] lub przeczytaj
[[https://golang.org/doc/code.html][How to Write Go Code]].

Jeśli potrzebujesz pomocy z biblioteką standardową, zobacz
[[https://golang.org/pkg/][package reference]]. Jeśli potrzebujesz pomocy
z samym językiem, może cię to zdziwić, ale
[[https://golang.org/ref/spec][Language Spec]] (pl. specyfikacja języka)
jest całkiem przyjemna w czytaniu.

By lepiej poznać model współbieżności języka Go, obejrzyj
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://talks.golang.org/2012/concurrency.slide][slajdy z prezentacji]])
oraz
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://talks.golang.org/2013/advconc.slide][slajdy z prezentacji]])
oraz przeczytaj
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]].

By rozpocząć pisanie aplikacji webowych, zobacz
[[https://vimeo.com/53221558][A simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][slajdy]])
oraz przeczytaj tutorial
[[https://golang.org/doc/articles/wiki/][Writing Web Applications]].

Przewodnik po
kodzie [[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]]
pokazuje funkcje w Go z ciekawej perspektywy.

Strona [[https://blog.golang.org/][Go Blog]] posiada duże archiwum
merytorycznych artykułów dotyczących Go.

Jeśli chcesz więcej informacji odwiedź [[https://golang.org][golang.org]].
